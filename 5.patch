diff --git a/payment_offsite_api.routing.yml b/payment_offsite_api.routing.yml
index 59b1411..7e11a3b 100644
--- a/payment_offsite_api.routing.yml
+++ b/payment_offsite_api.routing.yml
@@ -10,5 +10,5 @@ payment.offsite.external:
   defaults:
     _controller: '\Drupal\payment_offsite_api\Controller\PaymentOffsiteController::content'
   requirements:
-    _payment_method_configuration: 'view'
+    _access_payment_offsite_api_external: 'TRUE'
     external_status: ^[a-zA-Z0-9_]+
diff --git a/payment_offsite_api.services.yml b/payment_offsite_api.services.yml
index 754ca2f..4681004 100644
--- a/payment_offsite_api.services.yml
+++ b/payment_offsite_api.services.yml
@@ -4,8 +4,8 @@ services:
     tags:
       - { name: access_check, applies_to: _access_payment_offsite_api_redirect }
 
-  access_check.payment.external:
+  access_check.payment_offsite_api.external:
     class: Drupal\payment_offsite_api\Access\ExternalAccessCheck
-    arguments: ['@entity.manager', 'payment_method_configuration', ]
+    arguments: ['@plugin.manager.payment.method']
     tags:
-      - { name: access_check, applies_to: _payment_method_configuration }
+      - { name: access_check, applies_to: _access_payment_offsite_api_external }
diff --git a/src/Access/ExternalAccessCheck.php b/src/Access/ExternalAccessCheck.php
index f633bf1..f0779be 100644
--- a/src/Access/ExternalAccessCheck.php
+++ b/src/Access/ExternalAccessCheck.php
@@ -1,59 +1,37 @@
 <?php
-/**
- * @file
- * Contains \Drupal\node\Access\NodeRevisionAccessCheck.
- */
 
 namespace Drupal\payment_offsite_api\Access;
 
 use Drupal\Core\Access\AccessResult;
-use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Routing\Access\AccessInterface;
-use Drupal\Core\Session\AccountInterface;
 use Drupal\payment\Entity\PaymentMethodConfigurationInterface;
-use Symfony\Component\Routing\Route;
-
-class ExternalAccessCheck implements AccessInterface{
-
-  /**
-   * The node storage.
-   *
-   * @var \Drupal\node\NodeStorageInterface
-   */
-  protected $paymentStorage;
+use Drupal\payment\Plugin\Payment\Method\PaymentMethodManagerInterface;
 
-  /**
-   * The node access control handler.
-   *
-   * @var \Drupal\Core\Entity\EntityAccessControlHandlerInterface
-   */
-  protected $paymentAccess;
+/**
+ * Checks access to external responses.
+ */
+class ExternalAccessCheck implements AccessInterface {
 
   /**
-   * A static cache of access checks.
+   * The payment method manager.
    *
-   * @var array
+   * @var \Drupal\payment\Plugin\Payment\Method\PaymentMethodManagerInterface
    */
-  protected $access = [];
+  protected $paymentMethodManager;
 
   /**
-   * Constructs a new NodeRevisionAccessCheck.
+   * Constructs a new ExternalAccessCheck object.
    *
-   * @param \Drupal\Core\Entity\EntityManagerInterface $entity_manager
-   *   The entity manager.
+   * @param \Drupal\payment\Plugin\Payment\Method\PaymentMethodManagerInterface $payment_method_manager
+   *   The payment method manager.
    */
-  public function __construct(EntityTypeManagerInterface $entity_manager) {
-    $this->paymentStorage = $entity_manager->getStorage('payment_method_configuration');
-    $this->paymentAccess = $entity_manager->getAccessControlHandler('payment_method_configuration');
+  public function __construct(PaymentMethodManagerInterface $payment_method_manager) {
+    $this->paymentMethodManager = $payment_method_manager;
   }
 
   /**
-   * Checks routing access for the node revision.
+   * Checks routing access for the external responses.
    *
-   * @param \Symfony\Component\Routing\Route $route
-   *   The route to check against.
-   * @param \Drupal\Core\Session\AccountInterface $account
-   *   The currently logged in account.
    * @param \Drupal\payment\Entity\PaymentMethodConfigurationInterface $payment_method_configuration
    *   Payment method configuration instance.
    * @param string $external_status
@@ -62,10 +40,13 @@ class ExternalAccessCheck implements AccessInterface{
    * @return \Drupal\Core\Access\AccessResult
    *   The access result.
    */
-  public function access(Route $route, AccountInterface $account, PaymentMethodConfigurationInterface $payment_method_configuration, $external_status = '') {
-    $payment_method_service = \Drupal::service('plugin.manager.payment.method');
+  public function access(PaymentMethodConfigurationInterface $payment_method_configuration, $external_status = '') {
     $plugin_id = $payment_method_configuration->getPluginId() . ':' . $payment_method_configuration->id();
-    $payment_method = $payment_method_service->createInstance($plugin_id, $payment_method_configuration->getPluginConfiguration());
+    $payment_method = $this->paymentMethodManager->createInstance($plugin_id, $payment_method_configuration->getPluginConfiguration());
+    if (!is_subclass_of($payment_method, 'Drupal\payment_offsite_api\Plugin\Payment\Method\PaymentMethodBaseOffsite')) {
+      // Process only off-site payment methods.
+      return AccessResult::forbidden();
+    }
     $external_statuses = ['ipn' => FALSE] + $payment_method->getAllowedExternalStatuses();
     return AccessResult::allowedIf(array_key_exists($external_status, $external_statuses));
   }
diff --git a/src/Access/RedirectAccessCheck.php b/src/Access/RedirectAccessCheck.php
index 0730602..e4a0a31 100644
--- a/src/Access/RedirectAccessCheck.php
+++ b/src/Access/RedirectAccessCheck.php
@@ -7,7 +7,10 @@ use Drupal\Core\Routing\Access\AccessInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\payment\Entity\PaymentInterface;
 
-class RedirectAccessCheck implements AccessInterface{
+/**
+ * Checks access to redirect form.
+ */
+class RedirectAccessCheck implements AccessInterface {
 
   /**
    * Checks routing access for the payment.
diff --git a/src/Controller/PaymentOffsiteController.php b/src/Controller/PaymentOffsiteController.php
index 0d50432..f95c2cb 100644
--- a/src/Controller/PaymentOffsiteController.php
+++ b/src/Controller/PaymentOffsiteController.php
@@ -1,27 +1,64 @@
 <?php
-/**
- * Created by PhpStorm.
- * User: niko
- * Date: 12.03.16
- * Time: 12:55
- */
 
 namespace Drupal\payment_offsite_api\Controller;
 
-
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\payment\Entity\PaymentMethodConfiguration;
+use Drupal\payment\Plugin\Payment\Method\PaymentMethodManagerInterface;
 use Drupal\payment\Plugin\Payment\MethodConfiguration\PaymentMethodConfigurationInterface;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
 
-class PaymentOffsiteController extends ControllerBase{
+/**
+ * Handles result pages and IPN requests.
+ */
+class PaymentOffsiteController extends ControllerBase {
+
+  /**
+   * The payment method manager.
+   *
+   * @var \Drupal\payment\Plugin\Payment\Method\PaymentMethodManagerInterface
+   */
+  protected $paymentMethodManager;
 
-  public function content(PaymentMethodConfiguration $payment_method_configuration, $external_status = '') {
-    $request = \Drupal::request();
-    $payment_method_service = \Drupal::service('plugin.manager.payment.method');
+  /**
+   * Constructs a new PaymentOffsiteController object.
+   *
+   * @param \Drupal\payment\Plugin\Payment\Method\PaymentMethodManagerInterface $payment_method_manager
+   *   The payment method manager.
+   */
+  public function __construct(PaymentMethodManagerInterface $payment_method_manager) {
+    $this->paymentMethodManager = $payment_method_manager;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container) {
+    return new static(
+      $container->get('plugin.manager.payment.method')
+    );
+  }
+
+  /**
+   * Processes payment gateway responses.
+   *
+   * @param \Drupal\payment\Plugin\Payment\MethodConfiguration\PaymentMethodConfigurationInterface $payment_method_configuration
+   *   The payment method configuration entity.
+   * @param string $external_status
+   *   The passed in status.
+   * @param \Symfony\Component\HttpFoundation\Request $request
+   *   The request.
+   *
+   * @return array|\Symfony\Component\HttpFoundation\Response
+   *   The response or result page content.
+   */
+  public function content(PaymentMethodConfigurationInterface $payment_method_configuration, $external_status = '', Request $request) {
     $plugin_id = $payment_method_configuration->getPluginId() . ':' . $payment_method_configuration->id();
-    $payment_method = $payment_method_service->createInstance($plugin_id, $payment_method_configuration->getPluginConfiguration());
+    $payment_method = $this->paymentMethodManager
+      ->createInstance($plugin_id, $payment_method_configuration->getPluginConfiguration());
     $external_statuses = $payment_method->getAllowedExternalStatuses();
 
     // Process IPN as hidden.
@@ -47,14 +84,11 @@ class PaymentOffsiteController extends ControllerBase{
     if (is_callable([$payment_method, $method])) {
       return $payment_method->$method($request, $payment_method);
     }
+
+    // @todo Add logging of missed content callback in payment method.
     return [
-      '#type' => 'html_tag',
-      '#tag' => 'div',
+      '#markup' => $this->t('Payment processed with @status', ['@status' => $external_status]),
     ];
   }
 
-  public function ipnContent(PaymentMethodConfiguration $payment_method_configuration, $external_status = '') {
-    return new Response('', 404);
-  }
-
-}
\ No newline at end of file
+}
diff --git a/src/Form/OffsiteRedirectPaymentForm.php b/src/Form/OffsiteRedirectPaymentForm.php
index 1731a11..ef135bf 100644
--- a/src/Form/OffsiteRedirectPaymentForm.php
+++ b/src/Form/OffsiteRedirectPaymentForm.php
@@ -1,22 +1,18 @@
 <?php
-/**
- * Created by PhpStorm.
- * User: oleg
- * Date: 08.03.16
- * Time: 0:15
- */
 
 namespace Drupal\payment_offsite_api\Form;
 
-
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\payment\Entity\Payment;
 use Drupal\payment\Entity\PaymentInterface;
 use Drupal\payment\Entity\PaymentMethodConfiguration;
 
-
+/**
+ * Builds off-site redirect form.
+ */
 class OffsiteRedirectPaymentForm extends FormBase {
+
   /**
    * {@inheritdoc}
    */
@@ -70,4 +66,5 @@ class OffsiteRedirectPaymentForm extends FormBase {
   public function submitForm(array &$form, FormStateInterface $form_state) {
     // Unused, this is redirect to payment gateway form.
   }
+
 }
